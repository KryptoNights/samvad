// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PostCreated extends ethereum.Event {
  get params(): PostCreated__Params {
    return new PostCreated__Params(this);
  }
}

export class PostCreated__Params {
  _event: PostCreated;

  constructor(event: PostCreated) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get mediaUrl(): string {
    return this._event.parameters[2].value.toString();
  }

  get url(): string {
    return this._event.parameters[3].value.toString();
  }

  get text(): string {
    return this._event.parameters[4].value.toString();
  }

  get heading(): string {
    return this._event.parameters[5].value.toString();
  }
}

export class ReplyCreated extends ethereum.Event {
  get params(): ReplyCreated__Params {
    return new ReplyCreated__Params(this);
  }
}

export class ReplyCreated__Params {
  _event: ReplyCreated;

  constructor(event: ReplyCreated) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get text(): string {
    return this._event.parameters[2].value.toString();
  }

  get post(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get parent(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get top_level(): boolean {
    return this._event.parameters[5].value.toBoolean();
  }
}

export class TokensTransferred extends ethereum.Event {
  get params(): TokensTransferred__Params {
    return new TokensTransferred__Params(this);
  }
}

export class TokensTransferred__Params {
  _event: TokensTransferred;

  constructor(event: TokensTransferred) {
    this._event = event;
  }

  get messageId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get destinationChainSelector(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get receiver(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get feeToken(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get fees(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class Samvad__getPostResult {
  value0: Address;
  value1: BigInt;
  value2: string;
  value3: string;
  value4: string;
  value5: Array<BigInt>;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: string,
    value3: string,
    value4: string,
    value5: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigIntArray(this.value5));
    return map;
  }

  getValue0(): Address {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): string {
    return this.value2;
  }

  getValue3(): string {
    return this.value3;
  }

  getValue4(): string {
    return this.value4;
  }

  getValue5(): Array<BigInt> {
    return this.value5;
  }
}

export class Samvad__getReplyResult {
  value0: Address;
  value1: BigInt;
  value2: string;
  value3: BigInt;
  value4: Array<BigInt>;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: string,
    value3: BigInt,
    value4: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigIntArray(this.value4));
    return map;
  }

  getValue0(): Address {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): string {
    return this.value2;
  }

  getValue3(): BigInt {
    return this.value3;
  }

  getValue4(): Array<BigInt> {
    return this.value4;
  }
}

export class Samvad__postsResult {
  value0: Address;
  value1: BigInt;
  value2: string;
  value3: string;
  value4: string;
  value5: string;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: string,
    value3: string,
    value4: string,
    value5: string
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    map.set("value5", ethereum.Value.fromString(this.value5));
    return map;
  }

  getAccount(): Address {
    return this.value0;
  }

  getId(): BigInt {
    return this.value1;
  }

  getMediaUrl(): string {
    return this.value2;
  }

  getUrl(): string {
    return this.value3;
  }

  getText(): string {
    return this.value4;
  }

  getHeading(): string {
    return this.value5;
  }
}

export class Samvad__repliesResult {
  value0: Address;
  value1: BigInt;
  value2: string;
  value3: BigInt;
  value4: BigInt;
  value5: boolean;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: string,
    value3: BigInt,
    value4: BigInt,
    value5: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    return map;
  }

  getAccount(): Address {
    return this.value0;
  }

  getId(): BigInt {
    return this.value1;
  }

  getText(): string {
    return this.value2;
  }

  getPost(): BigInt {
    return this.value3;
  }

  getParent(): BigInt {
    return this.value4;
  }

  getTop_level(): boolean {
    return this.value5;
  }
}

export class Samvad extends ethereum.SmartContract {
  static bind(address: Address): Samvad {
    return new Samvad("Samvad", address);
  }

  balances(param0: Address): BigInt {
    let result = super.call("balances", "balances(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_balances(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balances", "balances(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPost(id: BigInt): Samvad__getPostResult {
    let result = super.call(
      "getPost",
      "getPost(uint256):(address,uint256,string,string,string,uint256[])",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return new Samvad__getPostResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toString(),
      result[3].toString(),
      result[4].toString(),
      result[5].toBigIntArray()
    );
  }

  try_getPost(id: BigInt): ethereum.CallResult<Samvad__getPostResult> {
    let result = super.tryCall(
      "getPost",
      "getPost(uint256):(address,uint256,string,string,string,uint256[])",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Samvad__getPostResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toString(),
        value[3].toString(),
        value[4].toString(),
        value[5].toBigIntArray()
      )
    );
  }

  getPostCount(): BigInt {
    let result = super.call("getPostCount", "getPostCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getPostCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getPostCount", "getPostCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPostReplies(id: BigInt): Array<BigInt> {
    let result = super.call(
      "getPostReplies",
      "getPostReplies(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toBigIntArray();
  }

  try_getPostReplies(id: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getPostReplies",
      "getPostReplies(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getPostRepliesCount(id: BigInt): BigInt {
    let result = super.call(
      "getPostRepliesCount",
      "getPostRepliesCount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toBigInt();
  }

  try_getPostRepliesCount(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPostRepliesCount",
      "getPostRepliesCount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReply(id: BigInt): Samvad__getReplyResult {
    let result = super.call(
      "getReply",
      "getReply(uint256):(address,uint256,string,uint256,uint256[])",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return new Samvad__getReplyResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toBigIntArray()
    );
  }

  try_getReply(id: BigInt): ethereum.CallResult<Samvad__getReplyResult> {
    let result = super.tryCall(
      "getReply",
      "getReply(uint256):(address,uint256,string,uint256,uint256[])",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Samvad__getReplyResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toBigIntArray()
      )
    );
  }

  getReplyCount(): BigInt {
    let result = super.call("getReplyCount", "getReplyCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getReplyCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReplyCount",
      "getReplyCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReplyReplies(id: BigInt): Array<BigInt> {
    let result = super.call(
      "getReplyReplies",
      "getReplyReplies(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toBigIntArray();
  }

  try_getReplyReplies(id: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getReplyReplies",
      "getReplyReplies(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getReplyRepliesCount(id: BigInt): BigInt {
    let result = super.call(
      "getReplyRepliesCount",
      "getReplyRepliesCount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toBigInt();
  }

  try_getReplyRepliesCount(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReplyRepliesCount",
      "getReplyRepliesCount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRouter(): Address {
    let result = super.call("getRouter", "getRouter():(address)", []);

    return result[0].toAddress();
  }

  try_getRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall("getRouter", "getRouter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  payCoin(): Address {
    let result = super.call("payCoin", "payCoin():(address)", []);

    return result[0].toAddress();
  }

  try_payCoin(): ethereum.CallResult<Address> {
    let result = super.tryCall("payCoin", "payCoin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  posts(param0: BigInt): Samvad__postsResult {
    let result = super.call(
      "posts",
      "posts(uint256):(address,uint256,string,string,string,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Samvad__postsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toString(),
      result[3].toString(),
      result[4].toString(),
      result[5].toString()
    );
  }

  try_posts(param0: BigInt): ethereum.CallResult<Samvad__postsResult> {
    let result = super.tryCall(
      "posts",
      "posts(uint256):(address,uint256,string,string,string,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Samvad__postsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toString(),
        value[3].toString(),
        value[4].toString(),
        value[5].toString()
      )
    );
  }

  replies(param0: BigInt): Samvad__repliesResult {
    let result = super.call(
      "replies",
      "replies(uint256):(address,uint256,string,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Samvad__repliesResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBoolean()
    );
  }

  try_replies(param0: BigInt): ethereum.CallResult<Samvad__repliesResult> {
    let result = super.tryCall(
      "replies",
      "replies(uint256):(address,uint256,string,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Samvad__repliesResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBoolean()
      )
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _link(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _router(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _payCoinAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class Add_paycoinsCall extends ethereum.Call {
  get inputs(): Add_paycoinsCall__Inputs {
    return new Add_paycoinsCall__Inputs(this);
  }

  get outputs(): Add_paycoinsCall__Outputs {
    return new Add_paycoinsCall__Outputs(this);
  }
}

export class Add_paycoinsCall__Inputs {
  _call: Add_paycoinsCall;

  constructor(call: Add_paycoinsCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class Add_paycoinsCall__Outputs {
  _call: Add_paycoinsCall;

  constructor(call: Add_paycoinsCall) {
    this._call = call;
  }
}

export class CcipReceiveCall extends ethereum.Call {
  get inputs(): CcipReceiveCall__Inputs {
    return new CcipReceiveCall__Inputs(this);
  }

  get outputs(): CcipReceiveCall__Outputs {
    return new CcipReceiveCall__Outputs(this);
  }
}

export class CcipReceiveCall__Inputs {
  _call: CcipReceiveCall;

  constructor(call: CcipReceiveCall) {
    this._call = call;
  }

  get message(): CcipReceiveCallMessageStruct {
    return changetype<CcipReceiveCallMessageStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class CcipReceiveCall__Outputs {
  _call: CcipReceiveCall;

  constructor(call: CcipReceiveCall) {
    this._call = call;
  }
}

export class CcipReceiveCallMessageStruct extends ethereum.Tuple {
  get messageId(): Bytes {
    return this[0].toBytes();
  }

  get sourceChainSelector(): BigInt {
    return this[1].toBigInt();
  }

  get sender(): Bytes {
    return this[2].toBytes();
  }

  get data(): Bytes {
    return this[3].toBytes();
  }

  get destTokenAmounts(): Array<CcipReceiveCallMessageDestTokenAmountsStruct> {
    return this[4].toTupleArray<CcipReceiveCallMessageDestTokenAmountsStruct>();
  }
}

export class CcipReceiveCallMessageDestTokenAmountsStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class CreatePostCall extends ethereum.Call {
  get inputs(): CreatePostCall__Inputs {
    return new CreatePostCall__Inputs(this);
  }

  get outputs(): CreatePostCall__Outputs {
    return new CreatePostCall__Outputs(this);
  }
}

export class CreatePostCall__Inputs {
  _call: CreatePostCall;

  constructor(call: CreatePostCall) {
    this._call = call;
  }

  get mediaUrl(): string {
    return this._call.inputValues[0].value.toString();
  }

  get url(): string {
    return this._call.inputValues[1].value.toString();
  }

  get text(): string {
    return this._call.inputValues[2].value.toString();
  }

  get heading(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class CreatePostCall__Outputs {
  _call: CreatePostCall;

  constructor(call: CreatePostCall) {
    this._call = call;
  }
}

export class CreateReplyCall extends ethereum.Call {
  get inputs(): CreateReplyCall__Inputs {
    return new CreateReplyCall__Inputs(this);
  }

  get outputs(): CreateReplyCall__Outputs {
    return new CreateReplyCall__Outputs(this);
  }
}

export class CreateReplyCall__Inputs {
  _call: CreateReplyCall;

  constructor(call: CreateReplyCall) {
    this._call = call;
  }

  get post(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get parent(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get text(): string {
    return this._call.inputValues[2].value.toString();
  }

  get top_level(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get amount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class CreateReplyCall__Outputs {
  _call: CreateReplyCall;

  constructor(call: CreateReplyCall) {
    this._call = call;
  }
}

export class Withdraw_paycoinsCall extends ethereum.Call {
  get inputs(): Withdraw_paycoinsCall__Inputs {
    return new Withdraw_paycoinsCall__Inputs(this);
  }

  get outputs(): Withdraw_paycoinsCall__Outputs {
    return new Withdraw_paycoinsCall__Outputs(this);
  }
}

export class Withdraw_paycoinsCall__Inputs {
  _call: Withdraw_paycoinsCall;

  constructor(call: Withdraw_paycoinsCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class Withdraw_paycoinsCall__Outputs {
  _call: Withdraw_paycoinsCall;

  constructor(call: Withdraw_paycoinsCall) {
    this._call = call;
  }
}
